import Head from 'next/head';
import { useEffect, useState, useContext, useRef } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { Swiper, SwiperSlide } from 'swiper/react';
import { Grid, Pagination } from 'swiper';

import { MyContext } from '../../src/pages/_app';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/grid';
import 'swiper/css/pagination';

const calculateDistance = (
  lat1: number,
  lon1: number,
  lat2: number,
  lon2: number
) => {
  const R = 6371e3; // metres
  const φ1 = (lat1 * Math.PI) / 180; // φ, λ in radians
  const φ2 = (lat2 * Math.PI) / 180;
  const Δφ = ((lat2 - lat1) * Math.PI) / 180;
  const Δλ = ((lon2 - lon1) * Math.PI) / 180;

  const a =
    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
    Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

  const d = (R * c) / 1000; // in km
  return d;
};

export default function Home({ churches }: any) {
  const [filteredChurches, setFilteredChurches] = useState<any>(churches);
  const [activeInput, setActiveInput] = useState(false);
  const searchInputRef = useRef(null);
  const [filter, setFilter] = useState<string>('');
  const [switchValue, setSwitchValue] = useState<boolean>(false);
  const { currentPosition } = useContext(MyContext);

  const handleTopLevelFilter = (e: any) => {
    const value = e.target.value;

    setFilter(value);
    setSwitchValue(false);
  };

  const handleDistanceFilter = (e: any) => {
    const value = parseInt(e.target.value);
    const filtered = churches.filter((church: any) => {
      const [churchALatitude, churchALongitude] = church.Location.replaceAll(
        ' ',
        ''
      ).split(',');

      const distance = calculateDistance(
        currentPosition.lat,
        currentPosition.lng,
        churchALatitude,
        churchALongitude
      );
      return distance <= value;
    });
    setFilteredChurches(filtered);
  };

  const handleInputChange = (value: string) => {
    if (!value) {
      setFilteredChurches(churches);
      setActiveInput(false);
      return;
    }

    const filterChurches = churches.filter((church: any) => {
      const churchName = church.Name.toLowerCase();
      return churchName.includes(value);
    });

    setActiveInput(true);
    setFilteredChurches(filterChurches);
  };

  useEffect(() => {
    let newChurches = [];
    console.log("🚀 ~ file: index.tsx:89 ~ useEffect ~ filter:", filter)
    if (filter && filter !== 'distance') {
      // check the filter
      newChurches = churches.filter((church: any) => {
        const value = church[filter] === switchValue ? true : false;
        return value;
      });
      console.log("🚀 ~ file: index.tsx:95 ~ newChurches=churches.filter ~ newChurches:", newChurches)
      setFilteredChurches(newChurches);
    }
  }, [switchValue, filter, churches]);

  const churchesToDisplay = filter !== 'all' ? filteredChurches : churches;

  return (
    <>
      <Head>
        <title>Localizador de Iglesias</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className='max-w-7xl mx-auto p-5'>
        <div className='title-container'>
          <h1 className='text-2xl mb-8'>Localizador de Iglesias</h1>

          <div className='search-input'>
            <select
              name='range'
              id='range'
              className='bg-transparent text-black p-2 text-base border border-gray-300 rounded-md w-40'
              onChange={handleTopLevelFilter}
              value={filter}
            >
              <option value=''>Nombre</option>
              <option value='Baptism'>Bautismo</option>
              <option value='Wedding'>Casamiento</option>
              <option value='FirstCommunion'>Primera Comunion</option>
              <option value='distance'>Distancia</option>
            </select>

            {filter === 'distance' ? (
              <select
                name='range'
                id='range'
                className='bg-transparent text-black p-2 text-base border border-gray-300 rounded-md w-40'
                onChange={(e) => handleDistanceFilter(e)}
              >
                <option value='' disabled>
                  Elige un rango
                </option>
                <option value='2'>2km</option>
                <option value='5'>5km</option>
                <option value='10'>10km</option>
                <option value='20'>20km</option>
              </select>
            ) : null}

            {filter && filter !== 'distance' ? (
              <label
                className={`toggle-button ${switchValue ? 'active' : ''}`}
                id='toggleButton'
              >
                <div
                  onClick={() => setSwitchValue(!switchValue)}
                  className={`toggle-switch ${switchValue ? 'active' : ''}`}
                ></div>
              </label>
            ) : null}

            {!filter ? (
              <input
                placeholder='Busca una iglesia'
                onChange={(e) => handleInputChange(e.target.value)}
                ref={searchInputRef}
              />
            ) : null}

            {activeInput ? (
              <button
                onClick={() => {
                  setFilteredChurches(churches);
                  setActiveInput(false);
                  // @ts-ignore
                  searchInputRef.current.value = '';
                }}
              >
                X
              </button>
            ) : null}
          </div>
        </div>

        <Swiper
          // install Swiper modules
          modules={[Grid, Pagination]}
          grid={{
            rows: 2,
            fill: 'row',
          }}
          spaceBetween={30}
          pagination={{ clickable: true }}
          breakpoints={{
            // when window width is >= 80px
            300: {
              slidesPerView: 1,
              spaceBetween: 30,
            },
            850: {
              slidesPerView: 2,
              spaceBetween: 30,
            },
          }}
        >
          {churchesToDisplay.map((church: any) => {
            const src = church.Images
              ? church.Images[0]
              : '/images/placeholder.png';
            return (
              <SwiperSlide
                className='rounded-tl-3xl rounded-tr-3xl h-96'
                key={church.ChurchId}
              >
                <Link
                  href={`/churches/${church.ChurchId}`}
                  key={church.ChurchId}
                >
                  <Image
                    src={src}
                    alt={church.Name}
                    width={200}
                    height={300}
                    priority={true}
                    style={{ height: '300px', width: '100%' }}
                  />

                  <div className='p-2 text-white rounded-b-lg h-20 bg-red-900'>
                    <h3>{church.Name}</h3>
                    <p>{church.Schedule}</p>
                  </div>
                </Link>
              </SwiperSlide>
            );
          })}

          {churchesToDisplay.length === 0 ? (
            <h2
              style={{
                color: 'white',
                fontSize: '1.2rem',
              }}
            >
              No hay Iglesias para mostrar
            </h2>
          ) : null}
        </Swiper>
      </main>
    </>
  );
}

export async function getStaticProps() {
  const res = await fetch(
    `https://api-church-localizer.onrender.com/api/churches`
  );
  const churches = await res.json();

  return {
    props: {
      churches,
    },
  };
}
